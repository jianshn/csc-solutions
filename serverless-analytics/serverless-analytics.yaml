# Copyright 2022 Amazon.com and its affiliates; all rights reserved. 
# This file is Amazon Web Services Content and may not be duplicated or distributed without permission.
AWSTemplateFormatVersion: "2010-09-09"
Description: Serverless Analytics workshop studio

Parameters:
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

  EnvironmentName:
      Description: An environment name that is prefixed to resource names
      Type: String
      Default: ServerlessAnalytics
      MinLength: 2
      MaxLength: 20
      AllowedPattern: ([a-zA-Z0-9]+)

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.1.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
     
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: "10.1.1.0/24"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: "10.1.2.0/24"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PublicSubnetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${EnvironmentName}-public-subnet-sg
      GroupDescription: "Security group with all ports open rule"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0  

  ServerlessAnalyticsRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: "ServerlessAnalyticsGlueRole"
      AssumeRolePolicyDocument: '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"glue.amazonaws.com"},"Action":"sts:AssumeRole"}]}'
      MaxSessionDuration: 43200
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSGlueConsoleFullAccess"
        - "arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        - "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
        - "arn:aws:iam::aws:policy/AmazonAthenaFullAccess"
      Description: "Allows Glue crawler to access S3 buckets"
  
  EC2Role:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: "ServerlessAnalyticsEC2Role"
      AssumeRolePolicyDocument: '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"ec2.amazonaws.com"},"Action":"sts:AssumeRole"}]}'
      MaxSessionDuration: 43200
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        - "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
      Description: "Allows EC2 to copy data from esg-data s3 bucket into Raw bucket"

  EC2InstanceProfile: 
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: 'EC2InstanceProfile'
      Path: '/'
      Roles: 
        - !Ref EC2Role

  RawS3Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Delete
    Properties:
      BucketName: !Join ['-', ["serverlessanalytics", !Ref AWS::AccountId, "raw"]]
  
  TransformedS3Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Delete
    Properties:
      BucketName: !Join ['-', ["serverlessanalytics", !Ref AWS::AccountId, "transformed"]]
  
  AthenaS3Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Delete
    Properties:
      BucketName: !Join ['-', ["serverlessanalytics", !Ref AWS::AccountId, "athena"]]

  AnalyticsEC2Instance:
    Type: AWS::EC2::Instance
    DependsOn: RawS3Bucket
    Properties:
      InstanceType: t3a.medium
      IamInstanceProfile: !Ref EC2InstanceProfile
      ImageId: !Ref  LatestAmiId
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref PublicSubnetSecurityGroup
      # KeyName: !Ref EC2KeyPair
      BlockDeviceMappings: 
      - DeviceName: "/dev/xvda"
        Ebs: 
          VolumeType: "gp2"
          VolumeSize: "50"
      UserData:
        'Fn::Base64': 
          !Sub 
            - |
              #!/bin/bash -x
              echo "Script starts at: `date`"

              YumIsRunning=`ps -ef|grep yum|grep -v grep|wc -l`
              while [[ $YumIsRunning -ge 1 ]]
              do
                echo "Yum is already running, sleep 1 second before retry"
                sleep 1
                YumIsRunning=`ps -ef|grep yum|grep -v grep|wc -l`
              done
              yum install -y awslogs wget zip unzip jq amazon-ssm-agent

              export AWS_REGION=${AWS::Region}
              sed -i "s/us-east-1/$AWS_REGION/" /etc/awslogs/awscli.conf
              cat >> /etc/awslogs/awslogs.conf <<EOF
              [cloud-init-output-log]
              datetime_format = %b %d %H:%M:%S
              file = /var/log/cloud-init-output.log
              buffer_duration = 5000
              log_stream_name = {instance_id}
              initial_position = start_of_file
              log_group_name = serverless-analytics-cloud-init-output
              EOF
              service awslogsd restart

              echo "Downloading csv files from github"
              curl -LO https://github.com/jianshn/csc-solutions/raw/main/serverless-analytics/serverless_data_analytics.zip
              unzip serverless_data_analytics.zip

              echo "Copying ESG Score Data"
              aws s3 cp ./ESG_Universe_raw.csv  s3://${RAWBUCKETNAME}/esg/esg-score/ 
              
              echo "Copying ESG Country Data"
              aws s3 cp ./ESG_Universe_Countries.csv s3://${RAWBUCKETNAME}/esg/esg-country/

              echo "Copying PySpark template"
              aws s3 cp ./esg-job.py s3://${ATHENBUCKETNAME}/glue/

              /opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --region ${AWS::Region} --resource WaitCondition
              echo "Script ends at: `date`"
            - RAWBUCKETNAME: !Ref RawS3Bucket
              ATHENBUCKETNAME: !Ref AthenaS3Bucket
              
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-EC2-ServerlessAnalytics-Client

  WaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    CreationPolicy:
      ResourceSignal: 
        Timeout: PT1H
  
  InitialiseQuicksightFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: serverlessanalytics-init-quicksight
      Handler: index.lambda_handler
      Environment:
        Variables:
          accountid: !Sub ${AWS::AccountId}
      Runtime: python3.9
      Role:
        Fn::GetAtt:
          - InvokeLambdaFunctionRole
          - Arn
      Timeout: 60
      Code:
        ZipFile: |
          import sys
          from pip._internal import main

          main(['install', '-I', '-q', 'boto3', '--target', '/tmp/', '--no-cache-dir', '--disable-pip-version-check'])
          sys.path.insert(0,'/tmp/')
          import boto3
          import os
          import time
          import cfnresponse
          from botocore.exceptions import ClientError
          
          client = boto3.client('quicksight', region_name="us-east-1")
          
          accountId = os.environ['accountid']

          def lambda_handler(event, context):
            if event['RequestType'] == "Create":
              try:
                response = client.create_account_subscription(
                    Edition='ENTERPRISE_AND_Q',
                    AuthenticationMethod='IAM_AND_QUICKSIGHT',
                    AwsAccountId=accountId,
                    AccountName=f'serverless-analytics-{accountId}',
                    NotificationEmail='test@amazon.com',
                    FirstName='workshopuser',
                    LastName='studio',
                    EmailAddress='workshopuser@amazon.com',
                    ContactNumber='659189922'
                )

                # Check if account is subscribed successfully
                while True:
                    response = client.describe_account_subscription(
                        AwsAccountId=accountId
                    )
                    
                    if response['AccountInfo']['AccountSubscriptionStatus'] == "ACCOUNT_CREATED":
                        break
                    else:
                        print("Current status is: " + response['AccountInfo']['AccountSubscriptionStatus'])
                        time.sleep(3)

                # Remove termination protection
                print("removing termination protection")
                response = client.update_account_settings(
                    AwsAccountId=accountId,
                    DefaultNamespace='default',
                    TerminationProtectionEnabled=False
                )

                print("adding user to quicksight")

                # Register User
                response = client.register_user(
                    IdentityType='IAM',
                    Email='test@amazon.com',
                    UserRole='ADMIN',
                    IamArn=f'arn:aws:iam::{accountId}:role/WSParticipantRole', #change this to WSParticipantRole or Admin 
                    AwsAccountId=accountId,
                    Namespace='default',
                    SessionName='Participant' #either Participant for workshop studio or {alias}-Isengard for personal testing
                )

                print("user registered")
                
                responseData = {}
                responseData['message'] = "Created Quicksight Subscription"
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "CustomResourcePhysicalID")

              except ClientError as error:
                print(error.response)
                responseData = {}
                responseData['message'] = error.response['Message']
                cfnresponse.send(event, context, cfnresponse.FAILED, responseData, "CustomResourcePhysicalID")
              
            else:
              try:
                response = client.update_account_settings(
                    AwsAccountId=accountId,
                    DefaultNamespace='default',
                    TerminationProtectionEnabled=False
                )

                response = client.delete_account_subscription(
                    AwsAccountId=accountId
                )
              except ClientError as error:
                print (error.response)
                
              responseData = {}
              responseData['message'] = "Successfully Deleted Quicksight Subscription"
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "CustomResourcePhysicalID")
    
  InvokeQuicksightFunction:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: InitialiseQuicksightFunction
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt InitialiseQuicksightFunction.Arn

  InvokeLambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-Lambda-Role
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      Path: /
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/PowerUserAccess
      Policies:
        - PolicyName: iam-pass-role
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource:
                  - !GetAtt ServerlessAnalyticsRole.Arn

  GlueDB:  
    Type: AWS::Glue::Database
    Properties: 
      CatalogId: !Ref AWS::AccountId 
      DatabaseInput:
        Name: esg_db
  
  InitialiseGlueStudioFunction:
    Type: AWS::Lambda::Function
    DependsOn: GlueDB
    Properties:
      FunctionName: serverlessanalytics-init-glue-studio
      Handler: index.lambda_handler
      Environment:
        Variables:
          S3Bucket: !Ref AthenaS3Bucket
          AnalyticsRole: !GetAtt ServerlessAnalyticsRole.Arn
      Runtime: python3.9
      Role:
        Fn::GetAtt:
          - InvokeLambdaFunctionRole
          - Arn
      Timeout: 60
      Code:
        ZipFile: |
          import sys
          from pip._internal import main

          main(['install', '-I', '-q', 'boto3', '--target', '/tmp/', '--no-cache-dir', '--disable-pip-version-check'])
          sys.path.insert(0,'/tmp/')
          import boto3
          import os
          import time
          import cfnresponse
          from botocore.exceptions import ClientError
          
          client = boto3.client('glue')
          
          analyticsrole = os.environ['AnalyticsRole']
          S3Bucket = os.environ['S3Bucket']

          def lambda_handler(event, context):
            if event['RequestType'] == "Create":
              try:
                response = client.create_job(
                  Name='esg-job',
                  Description='esg-job',
                  Role=analyticsrole,
                  Command={
                      'Name': 'glueetl',
                      'PythonVersion': '3',
                      'ScriptLocation': f's3://{S3Bucket}/glue/esg-job.py'
                  },
                  MaxRetries=123,
                  Timeout=2880,
                  GlueVersion='2.0',
                  NumberOfWorkers=100,
                  CodeGenConfigurationNodes={
                      'node-1': {
                          'S3CatalogSource': {
                              'Name': 'ESG Score Source',
                              'Database': 'default',
                              'Table': 'test'
                          }
                      }
                  },
                  WorkerType='G.2X',
                  DefaultArguments={
                      '--enable-continuous-cloudwatch-log': 'true',
                      '--job-language': 'python',
                      '--enable-metrics': 'true',
                      '--enable-spark-ui': 'true',
                      '--enable-glue-datacatalog': 'true'
                  },
              )
                
                responseData = {}
                responseData['message'] = "Created a blank canvas on glue studio"
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "CustomResourcePhysicalID")

              except ClientError as error:
                print(error.response)
                responseData = {}
                responseData['message'] = error.response['Message']
                cfnresponse.send(event, context, cfnresponse.FAILED, responseData, "CustomResourcePhysicalID")
              
            else:
              responseData = {}
              responseData['message'] = "Successfully Deleted Glue Job"
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "CustomResourcePhysicalID")
    
  InvokeGlueStudioFunction:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: WaitCondition
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt InitialiseGlueStudioFunction.Arn

